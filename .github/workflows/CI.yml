on:
  push:
    branches: [master]
  pull_request:

name: CI

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: clippy
      - run: cargo clippy -- -D warnings

  check:
    name: Check ${{ matrix.toolchain }} / ${{ matrix.triple.target }}
    runs-on: ubuntu-latest
    env:
      LD_LIBRARY_PATH: /usr/local/lib
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install valgrind
          sudo apt remove libgeos-dev -y
      - name: Install geos
        # First we install the 3.8 version of libgeos and then checkout the 3.8.1 version
        run: |
          git clone https://github.com/libgeos/geos
          cd geos
          git checkout 24650422b3982f17cc493fe92a70228f2ad624b4
          ./autogen.sh
          ./configure
          make
          sudo make install
          sudo ldconfig
      - name: Build geos crate
        run: |
          cargo build
          cargo build --features v3_8_0
          cargo build --features v3_7_0
          cargo build --features v3_6_0
      - name: Run geos tests
        run: |
          cargo test --features v3_8_0
          cargo test --features v3_7_0
          cargo test --features v3_6_0
          cargo test --features geo
          cargo test --features json
          cargo test --features 'v3_8_0,geo,json'
          cargo test
      - name: Check doc generation
        run: |
          cargo doc --features dox
          cargo doc
      - name: Run examples
        run: |
          cargo run --example verbose_example
          cargo run --example prepared_geom
          cargo run --features geo --example prepared_geom
          cargo run --example from_geo
          cargo run --features geo --example from_geo
      - name: Check memory leaks
        # run valgrind to check that there are no memoryleaks
        # Note: cargo seems to randomly name the executable, so we use find to find all the tests
        #
        # As long as leaks come from "geos::geom::GeometryFactory::getDefaultInstance", then
        # it's fine (singleton).
        run: |
          find ./target/debug/deps -name "geos*"  -type f -executable | xargs -n 1 valgrind --leak-check=full --error-exitcode=42 --show-leak-kinds=all
          valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/from_geo
          valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/verbose_example
          valgrind --leak-check=full --error-exitcode=42 ./target/debug/examples/prepared_geom
